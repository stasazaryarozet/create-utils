#!/usr/bin/env python3
"""
destroy - утилита для удаления репозитория GitHub и локального проекта

SYNOPSIS
    destroy имя_проекта

DESCRIPTION
    Удаляет репозиторий на GitHub и соответствующую директорию проекта.
    
    Связанные утилиты:
        create(1) - создание нового репозитория и проекта

CONFIGURATION
    Конфигурационный файл находится в ~/.config/create/config.yaml
    По умолчанию:
        projects_dir: ~/iCloud/Projects
        github_token: ваш_токен_github
"""

import os
import sys
import yaml
import shutil
from pathlib import Path
from github import Github
from github.GithubException import GithubException

def load_config() -> dict:
    """
    Загружает конфигурацию из файла.
    Возвращает словарь с настройками.
    """
    config_path = Path.home() / '.config' / 'create' / 'config.yaml'
    default_config = {
        'projects_dir': str(Path.home() / 'iCloud' / 'Projects'),
        'github_token': ''  # Требуется заполнить токен GitHub
    }
    if not config_path.exists():
        print("Конфигурационный файл не найден", file=sys.stderr)
        sys.exit(1)
    with open(config_path) as f:
        config = yaml.safe_load(f)
        if not config.get('github_token'):
            print("Ошибка: GitHub токен не найден в конфигурационном файле")
            sys.exit(1)
        return config

def delete_repo(name: str, github_token: str) -> None:
    """
    Удаляет репозиторий на GitHub по имени.
    Если репозиторий не найден — выводит предупреждение, но не завершает выполнение с ошибкой.
    """
    try:
        g = Github(github_token)
        user = g.get_user()
        repo = user.get_repo(name)
        repo.delete()
        print(f"Репозиторий {name} успешно удалён на GitHub.")
    except GithubException as e:
        if e.status == 404:
            print(f"Внимание: репозиторий {name} не найден на GitHub (возможно, уже удалён).")
        else:
            print(f"Ошибка при удалении репозитория на GitHub: {e}", file=sys.stderr)
            sys.exit(1)

def delete_local_project(name: str, projects_dir: str) -> None:
    """
    Удаляет локальную директорию проекта.
    Если директория не найдена — выводит предупреждение, но не завершает выполнение с ошибкой.
    """
    projects_dir = os.path.expanduser(projects_dir)
    project_path = Path(projects_dir) / name
    if project_path.exists():
        shutil.rmtree(project_path)
        print(f"Локальная директория {project_path} успешно удалена.")
    else:
        print(f"Внимание: директория проекта {name} не найдена.")

def main():
    if len(sys.argv) != 2:
        print("Использование: destroy имя_проекта", file=sys.stderr)
        sys.exit(1)
    project_name = sys.argv[1]
    config = load_config()
    try:
        delete_repo(project_name, config['github_token'])
        delete_local_project(project_name, config['projects_dir'])
        print(f"Проект {project_name} полностью удалён.")
    except Exception as e:
        print(f"Ошибка при удалении проекта: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    main() 